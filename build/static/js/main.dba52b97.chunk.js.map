{"version":3,"sources":["components/card/index.jsx","components/board/index.jsx","deck.js","index.js","App.jsx"],"names":["Card","_ref","handleClick","id","type","flipped","solved","height","width","disabled","react_default","a","createElement","className","concat","style","onClick","src","Board","dimension","cards","map","card","key","includes","intializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","PropTypes","bool","isRequired","number","arrayOf","shape","func","ReactDOM","render","_useState","useState","_useState2","Object","slicedToArray","setCards","_useState3","_useState4","setFlipped","_useState5","_useState6","setDimension","_useState7","_useState8","setSolved","_useState9","_useState10","setDisabled","useEffect","resizeBoard","initializeDeck","preloadImage","resizeListener","window","addEventListener","removeEventListener","Image","resetCards","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","toConsumableArray","setTimeout","getElementById"],"mappings":"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","file":"static/js/main.dba52b97.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './styles.css'\n\n// create a function that gives use access to the props directly\nexport default function Card({ \n    handleClick,\n    id, \n    type, \n    flipped,\n    solved,\n    height, \n    width, \n    disabled \n}) {\n    return <div\n        // create a class name based on its flip status\n        className={`flip-container ${flipped ? 'flipped' : ''}`}\n        style={{\n            width, height\n        }}\n        // on click event that passes the id of the card we are flipping\n        onClick={() => disabled? null : handleClick(id)}\n    >\n        {/* a div the will hold the image  */}\n        <div className=\"flipper\">\n            <img\n                style={{\n                    height, width\n                }}\n                /* will change class name and src depening on if the card \n                   is on the front or back*/\n                className={flipped ? 'front' : 'back'}\n                src={flipped || solved ? `/img/${type}.png` : `/img/back.png`}\n                // alt=\"\"\n            />\n        </div>\n    </div>\n}\n// object with all the props\nCard.propTypes = {\n    handleClick: PropTypes.func.isRequired,\n    id: PropTypes.number.isRequired,\n    flipped: PropTypes.bool.isRequired,\n    solved: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    disabled: PropTypes.bool.isRequired\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Card from '../card'\nimport './styles.css'\n\nexport default function Board ({ \n    disabled, dimension, cards, flipped, solved, handleClick  \n}) {\nreturn (<div className=\"board\">\n{cards.map((card) =>(\n    <Card\n    key={card.id}\n    id={card.id}\n    type={card.type}\n    width={dimension / 4.5}\n    height={dimension / 4.5}\n    flipped={flipped.includes(card.id)}\n    solved ={solved.includes(card.id)}\n    handleClick={handleClick}\n    disabled={disabled || solved.includes(card.id)}\n \n    />\n))}\n\n</div>\n)\n}\n\nBoard.PropTypes = {\n    disabled: PropTypes.bool.isRequired,\n    dimension: PropTypes.number.isRequired,\n    card: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n    handleClick: PropTypes.func.isRequired,\n}","function shuffle(array) {\n    const _array = array.slice(0)\n    for(let i = 0;i < array.length -1; i++) {\n        let randomIndex = Math.floor(Math.random() * (i+1))\n        let temp = _array[i]\n        _array[i] = _array[randomIndex]\n        _array[randomIndex] = temp\n    }\n    return _array\n}\n\nexport default function intializeDeck(){\n    let id = 0\n    const cards = [\"react\", \"reactu\", \"redux\", \"vue\", \"angular\", \n    \"javascript\", \"ruby\", \"rails\"].reduce((acc, type) => {\n        acc.push({\n            id: id++,\n            type\n        })\n        acc.push({\n            id: id++,\n            type\n        })\n        return acc\n    }, [])\n\n    return shuffle(cards)\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))","import React, { useState, useEffect } from 'react'\nimport Board from './components/board'\n\n\nimport initializeDeck from './deck'\nimport { isNameStartChar } from 'xmlchars/xml/1.0/ed5';\n\nexport default function App() {\n\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved,setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n \n\n  // a function to make sure the cards only get called everytime it is rendered\n  useEffect(()=> {\n    resizeBoard()\n    // generates a deck of cards\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    preloadImage()\n  }, cards)\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener(\"resize\", resizeBoard)\n    return () => window.removeEventListener(\"resize\", resizeListener)\n  })\n\n  const handleClick = (id) => {\n   setDisabled(true)\n   if (flipped.length === 0) {\n    setFlipped([id])\n    setDisabled(false)\n   } else {\n     if(sameCardClicked(id))return\n     setFlipped([flipped[0], id])\n     if(isMatch(id)) {\n       setSolved([... solved, flipped[0], id])\n       resetCards()\n     } else {\n       setTimeout(resetCards, 2000)\n     }\n   }\n  }\n\n  const preloadImage = () => {\n    cards.map(card => {\n      const src = `/img/${card.type}.png`\n      new Image().src = src\n    })\n  }\n\nconst resetCards = () => {\n  setFlipped([])\n  setDisabled(false)\n}\n\nconst sameCardClicked = (id) => flipped.includes(id)\n\nconst isMatch = (id) => {\n  const clickedCard = cards.find((card) => card.id === id)\n  const flippedCard = cards.find((card) => flipped[0] === card.id)\n  return flippedCard.type === clickedCard.type\n}\n\nconst resizeBoard = () => {\n  setDimension(\n    Math.min(\n    document.documentElement.clientWidth,\n    document.documentElement.clientHeight,\n  ),\n  )\n}\n\n  return (\n    <div>\n\n      <h2>Can you remember where the cards are?</h2>\n      <Board\n      dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n      />\n\n    </div>\n  )\n}\n"],"sourceRoot":""}