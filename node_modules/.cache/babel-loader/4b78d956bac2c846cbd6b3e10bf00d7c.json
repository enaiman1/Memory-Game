{"ast":null,"code":"import _toConsumableArray from \"/Users/EricMac/Desktop/bootcamp/other_projects/Memory-Game/029-build-a-memory-game-using-react-hooks/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/EricMac/Desktop/bootcamp/other_projects/Memory-Game/029-build-a-memory-game-using-react-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/EricMac/Desktop/bootcamp/other_projects/Memory-Game/029-build-a-memory-game-using-react-hooks/src/App.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Board from './components/board';\nimport initializeDeck from './deck';\nimport { isNameStartChar } from 'xmlchars/xml/1.0/ed5';\nexport default function App() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cards = _useState2[0],\n      setCards = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      flipped = _useState4[0],\n      setFlipped = _useState4[1];\n\n  var _useState5 = useState(400),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dimension = _useState6[0],\n      setDimension = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      solved = _useState8[0],\n      setSolved = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      disabled = _useState10[0],\n      setDisabled = _useState10[1]; // a function to make sure the cards only get called everytime it is rendered\n\n\n  useEffect(function () {\n    resizeBoard(); // generates a deck of cards\n\n    setCards(initializeDeck());\n    preloadImages();\n  }, []);\n  useEffect(function () {\n    preloadImage();\n  }, cards);\n  useEffect(function () {\n    var resizeListener = window.addEventListener(\"resize\", resizeBoard);\n    return function () {\n      return window.removeEventListener(\"resize\", resizeListener);\n    };\n  });\n\n  var handleClick = function handleClick(id) {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved(_toConsumableArray(solved).concat([flipped[0], id]));\n        resetCards();\n      } else {\n        setTimeout(resetCards, 2000);\n      }\n    }\n  };\n\n  var preloadImage = function preloadImage() {\n    cards.map(function (card) {\n      var src = \"/img/\".concat(card.type, \".png\");\n      new Image().src = src;\n    });\n  };\n\n  var resetCards = function resetCards() {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  var sameCardClicked = function sameCardClicked(id) {\n    return flipped.includes(id);\n  };\n\n  var isMatch = function isMatch(id) {\n    var clickedCard = cards.find(function (card) {\n      return card.id === id;\n    });\n    var flippedCard = cards.find(function (card) {\n      return flipped[0] === card.id;\n    });\n    return flippedCard.type === clickedCard.type;\n  };\n\n  var resizeBoard = function resizeBoard() {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Can you remember where the cards are?\"), React.createElement(Board, {\n    dimension: dimension,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disabled: disabled,\n    solved: solved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/EricMac/Desktop/bootcamp/other_projects/Memory-Game/029-build-a-memory-game-using-react-hooks/src/App.jsx"],"names":["React","useState","useEffect","Board","initializeDeck","isNameStartChar","App","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","preloadImages","preloadImage","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","map","card","src","type","Image","includes","clickedCard","find","flippedCard","Math","min","document","documentElement","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Board from './components/board'\n\n\nimport initializeDeck from './deck'\nimport { isNameStartChar } from 'xmlchars/xml/1.0/ed5';\n\nexport default function App() {\n\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved,setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n \n\n  // a function to make sure the cards only get called everytime it is rendered\n  useEffect(()=> {\n    resizeBoard()\n    // generates a deck of cards\n    setCards(initializeDeck())\n    preloadImages()\n\n  }, [])\n\n  useEffect(() => {\n    preloadImage()\n  }, cards)\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener(\"resize\", resizeBoard)\n    return () => window.removeEventListener(\"resize\", resizeListener)\n  })\n\n  const handleClick = (id) => {\n   setDisabled(true)\n   if (flipped.length === 0) {\n    setFlipped([id])\n    setDisabled(false)\n   } else {\n     if(sameCardClicked(id))return\n     setFlipped([flipped[0], id])\n     if(isMatch(id)) {\n       setSolved([... solved, flipped[0], id])\n       resetCards()\n     } else {\n       setTimeout(resetCards, 2000)\n     }\n   }\n  }\n\n  const preloadImage = () => {\n    cards.map(card => {\n      const src = `/img/${card.type}.png`\n      new Image().src = src\n    })\n  }\n\nconst resetCards = () => {\n  setFlipped([])\n  setDisabled(false)\n}\n\nconst sameCardClicked = (id) => flipped.includes(id)\n\nconst isMatch = (id) => {\n  const clickedCard = cards.find((card) => card.id === id)\n  const flippedCard = cards.find((card) => flipped[0] === card.id)\n  return flippedCard.type === clickedCard.type\n}\n\nconst resizeBoard = () => {\n  setDimension(\n    Math.min(\n    document.documentElement.clientWidth,\n    document.documentElement.clientHeight,\n  ),\n  )\n}\n\n  return (\n    <div>\n\n      <h2>Can you remember where the cards are?</h2>\n      <Board\n      dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n      />\n\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}